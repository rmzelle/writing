===============================
`Citation Style Language 1.0`__
===============================
~~~~~~~~~~~~~~
Editing Styles
~~~~~~~~~~~~~~

__ `Table of Contents`_

.. class:: fixed

   `citationstyles.org`__

__ http://citationstyles.org/

.. class:: info-version

   version 2011-06-03

.. class:: contributors

   Author
       * Rintze M. Zelle

.. |link| image:: link.png

========

.. contents:: Table of Contents

========

Preface
-------

Scope
~~~~~

This is an introduction to the Citation Style Language (CSL) and the
technologies it uses (e.g. XML), and a tutorial for creating and modifying CSL
styles and locale files. This guide does not discuss all the features of CSL.
For that, you can consult the (more technical) |link| `CSL 1.0 specification`_,
which we will reference throughout this guide.

.. _CSL 1.0 specification: http://citationstyles.org/downloads/specification.html

Introduction
------------

What is CSL?
~~~~~~~~~~~~

Citing resources (books, journal articles, etc.) is an integral part of
scholarly communication. However, formatting references can be complex and
time-consuming. While some citation guides dedicate multiple pages to discuss
every single detail, others only provide formatted examples. The situation is
further complicated by the fact that many journals and publishers have their own
citation style format.

Luckily, computer software can ease this burden. Reference management software
not only helps with keeping track of scholarly resources, but can often also
automatically generate citations and bibliographies in different styles [#]_.
But to know how to format references, these reference managers need descriptions
of each style in a computer-readable format. In this guide we focus on one of
these formats, the Citation Style Language (CSL).

Before CSL, most reference managers either used a proprietary style format (e.g.
EndNote's ".ens" output styles), or the open BibTeX ".bst" style format, whose
original specification from 1985 is rather limited, predating the internet era
and focused on the sciences. In comparison, CSL enjoys several advantages: it
uses the popular XML format (familiar to programmers and relatively
human-readable), is under active development with input from the user community,
offers freely available styles (there are already over 1500 CSL styles), and
offers new features such as advanced localization support and conditional
formatting. This has not gone unnoticed: CSL 1.0 is already used by several
popular reference managers, including |link| `Zotero <http://www.zotero.org>`_,
|link| `Mendeley <http://www.mendeley.com/>`_ and |link| `Papers
<http://www.mekentosj.com/papers/>`_.

.. [#] Reference managers store the individual details of each resource
       separately (e.g. the item's title, issue date, authors, etc.). Together,
       these details make up the **item metadata**. Formatted references are
       generated by piecing together the different parts of metadata.

CSL Infrastructure
^^^^^^^^^^^^^^^^^^

In addition to **item metadata** (the details of the cited resources) and **CSL
styles** (describing the different citation formats), there are a few more parts
that make up the CSL infrastructure, which is shown below:

|csl-infrastructure|

.. |csl-infrastructure| image:: csl-infrastructure.png

First, the reference manager needs a **CSL processor** to process the CSL style
and item metadata [#]_. Secondly, CSL styles are accompanied by a collection of
**CSL locale files**, which are used to render the references in the desired
locale (with a single CSL style, you can generate references in a range of
languages). Finally, if the citations and bibliographies are rendered via a word
processor plugin, the item metadata is supplemented by details on how the items
are cited in the manuscript (e.g. the order in which the items are cited, and
which items are cited together in a single citation).

.. [#] Zotero and Mendeley both use the open source JavaScript |link|
       `citeproc-js <https://bitbucket.org/fbennett/citeproc-js/wiki/Home>`_ CSL
       processor.

XML Basics
~~~~~~~~~~

A basic understanding of XML is necessary to edit CSL styles and locale files.
Feel free to skip this section if you already have experience with XML or HTML.

Let's take a look at the following piece of CSL XML:

.. sourcecode:: xml

    <?xml version="1.0" encoding="utf-8"?>
    <style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0">
      <info>
        <title>Academic Medicine (Formerly Journal of Medical Education)</title>
        <id>http://www.zotero.org/styles/academic-medicine</id>
        <link href="http://www.zotero.org/styles/vancouver" rel="independent-parent"/>
        <category citation-format="numeric"/>
        <category field="medicine"/>
        <updated/>
      </info>
    </style>

There are several concepts and terms you need to be familiar with. These are:

- **XML Declaration**. The first line of any style or locale file should always
  be the . It most cases, this will be ``<?xml version="1.0"
  encoding="utf-8"?>``. This line designates the document as XML, and specifies
  the XML version ("1.0") and character encoding ("utf-8") used.

- **Elements and Hierarchy**. The basic building blocks of XML documents are
  elements, which are hierarchically structured. Each XML document contains a
  single root element (for CSL styles this is ``<style/>``). If an element
  contains other elements, the parent element is split into a start tag
  (``<style>``) and an end tag (``</style>``). In our example, the ``<style/>``
  element has one child element, ``<info/>``. This element has several children
  of its own, which are grandchildren of the grandparent ``<style/>`` element.
  Element tags are always wrapped in less-than ("<") and greater-than (">")
  characters (e.g. ``<style>``). For an empty-element tag, ">" is preceded by a
  forward-slash (e.g. ``<category/>``), while for end tags "<" is followed by a
  forward-slash (e.g. ``</style>``). Indentation with spaces or tabs is used to
  show the hierarchical levels.

- **Attributes and Element Content**. There are two ways to add additional
  information to elements. First, XML elements can carry one or more attributes
  (the order of attributes on an element is arbitrary). Every attribute needs a
  value. For example, the style element carries a ``version`` attribute, set to
  value of "1.0", indicating that the style is CSL 1.0. Secondly, elements can
  store non-element content between start and end tags, e.g. the content of the
  ``<id/>`` element is "http://www.zotero.org/styles/academic-medicine".

- **Escaping**. Some characters have to be substituted when used for purposes
  other than for defining the XML structure (e.g. when used in attribute values
  or non-element content), or, in the case of the ampersand ("&"), for
  substitution itself. Escape sequences are "&lt;" for "<", "&gt;" for ">",
  "&amp;" for "&", "&apos;" for ', and "&quot;" for ". For example, the link
  "http://domain.com/?tag=a&id=4" should be escaped as ``<link
  href="http://domain.com/?tag=a&amp;id=4"/>``.

- **Well-formedness and Schema Validity**. Unlike HTML, XML does not allow for
  any markup errors. Any error, like forgetting an end tag, having more than one
  root element, or incorrect escaping will break the XML document and prevent it
  from being processed. XML documents that follow the XML specification and
  don't contain any errors are "well-formed". For well-formed styles and locale
  files there is a second level of testing, involving the CSL schema. The schema
  describes which elements and attributes are allowed, and how they should be
  used. When a style of locale file is tested against the rules laid out in the
  schema (this is called "validation") and passes, the file is considered to be
  valid CSL. Only well-formed and valid CSL files can be expected to work.

Tools
~~~~~

Editing CSL styles and locale files can become much easier if you're using the right tools.

Text/XML editors
^^^^^^^^^^^^^^^^

You can use any text editor that allows you to edit plain text, but there are a
few things to consider when choosing one. Some editors have features specific to
editing XML, such as automatic indenting, closing of tags, and real-time testing
for well-formedness and schema validation. Examples are the commercial |link|
`<oXygen/> XML Editor <http://www.oxygenxml.com/>`_, and the free and open
source editors |link| `GNU Emacs <http://www.gnu.org/software/emacs/>`_ (in
|link| `nXML mode <http://www.thaiopensource.com/nxml-mode/>`_) and |link|
`jEdit <http://www.jedit.org/>`_. The latter is described in more detail below.

jEdit
'''''

|link| `jEdit <http://www.jedit.org/>`_ is an open source cross-platform
Java-based text editor, which can be turned into a powerful XML editor by
installing the "XML" plugin. Follow these instructions to set up jEdit for
editing CSL styles and locales:

1. Install jEdit
2. Run jEdit, and open the Plugin Manager ("Plugins" > "Plugin Manager..."). Go
   to the "Install" tab, select the "XML" plugin and click the "Install" button
   (this will also install the "SideKick" plugin). The plugin will add an "XML"
   menu entry in the "Plugins" menu.
3. CSL XML files should preferably be indented with 2 spaces per level.
   Indentation settings can be set via "Utilities" > "Global Options..." under
   jEdit/Editing. Set "Tab width" and "Indent width" to "2", and check the "Soft
   (emulated with spaces) tabs" checkbox. You can now automatically (re)indent
   your XML file via "Plugins" > "XML" > "Indent XML".
4. To enable real-time validation against the CSL schema, |link| `download
   <https://github.com/citation-style-language/schema/zipball/v1.0>`_ (and
   unzip) the CSL 1.0 schema. Select the schema in jEdit ("Plugins" > "XML" >
   "Set Schema...", click the "Browse..." button, and select the "csl.rnc"
   file). Check the "Parse on Keystroke" option found under "Plugins" >
   "SideKick" to enable real-time validation.

XML Validators
^^^^^^^^^^^^^^

Instead of validating directly in the text editor, you can also use a dedicated
XML validator. Validators that support the Relax NG Compact format of the CSL
schema include the command-line tools |link| `Jing
<http://www.thaiopensource.com/relaxng/jing.html>`_ and |link| `RNV
<http://www.davidashen.net/rnv.html>`_, and the online Jing-powered |link|
`Validator.nu <http://validator.nu/>`_.

Validating with Validator.nu
''''''''''''''''''''''''''''

To use the online XML validator |link| `Validator.nu <http://validator.nu/>`_:

1. Select the style you want to validate. When using "Address" option, provide
   the URL to the style and check the "Be lax about HTTP Content-Type"
   check-box. With "File Upload", select the style file on your computer. With
   "Text Field", paste the style code into the text box and select the "XML;
   don't load external entities" option for the "Parser" drop-down menu.
   
2. Paste the URL to the CSL 1.0 schema into the "Schemas" text field:
   https://github.com/citation-style-language/schema/raw/v1.0/csl.rnc
   
3. Click the "Validate" button. If your style is well-formed and conforms to the
   CSL schema, you will get the message:

    | The document validates according to the specified schema(s).

Zotero's Preview and Reference Test panes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The |link| `Zotero <http://www.zotero.org>`_ reference manager comes with two
tools for editing CSL styles. After installing the Zotero Firefox add-on, you
can access the **Zotero Preview pane** by entering
"chrome://zotero/content/tools/cslpreview.xul" in the Firefox address bar. The
Preview pane generates citations and bibliographies for all installed CSL
styles, using the items selected in the library of the Zotero add-on. The
**Zotero Reference Test pane**, accessible via
"chrome://zotero/content/tools/csledit.xul", allows you to edit a style with
instant previewing, again using the items selected in your Zotero library.

CSL Style Repository
--------------------

Contributing Styles
~~~~~~~~~~~~~~~~~~~

If your new or modified style might be of interest to other users, consider
sharing it via the |link| `CSL Style Repository`_ (these same styles can be
browsed and searched via the |link| `Zotero Style Repository
<http://www.zotero.org/styles>`_.

Before submitting a style for addition to the repository, please go over the
following checklist:

.. _CSL Style Repository: https://github.com/citation-style-language/styles

Validation
^^^^^^^^^^

Make sure the style validates against the CSL 1.0 schema (see `XML
validators`_).

Licensing
^^^^^^^^^

New styles should be licensed under the |link| `CC-BY-SA license
<http://creativecommons.org/licenses/by-sa/3.0/>`_. E.g.:

.. sourcecode:: xml

    <style>
      <info>
        <rights>This work is licensed under a Creative Commons Attribution-Share Alike 3.0 License: http://creativecommons.org/licenses/by-sa/3.0/</rights>
      </info>
    </style>

If you copy code from existing styles, respect their licenses.

Attribution
^^^^^^^^^^^

Please add yourself as the author for a new style. If your style is largely
based on another style, link to the original style as the template, e.g.:

.. sourcecode:: xml

    <style>
      <info>
        <link href="http://www.zotero.org/styles/original-style" rel="template"/>
      </info>
    </style>

If you modified a style, add yourself as an author or contributor (for major and
minor contributions, respectively).

Style Names and IDs
^^^^^^^^^^^^^^^^^^^

The style file name may only contain lowercase roman letters (a-z), digits (0-9)
and single hyphens (-), and should end with a ".csl" file extension. Words in
the title should be separated by a hyphen, e.g. "current-biology.csl" instead of
"currentbiology.csl".

The style ID (and the "self" link for independent styles) should consist of the
string "http://www.zotero.org/styles/" followed by the file name minus the
".csl" extension. E.g. for the style "apa.csl":

.. sourcecode:: xml

    <style>
      <info>
        <id>http://www.zotero.org/styles/apa</id>
        <link href="http://www.zotero.org/styles/apa" rel="self"/>
      </info>
    </style>

Indenting
^^^^^^^^^

Styles should preferably be indented with 2 spaces per level. If your text
editor does not support automatic XML indenting, you can use |link|
http://www.shell-tools.net/index.php?op=xml_format.

Submitting
^^^^^^^^^^

The simplest way to submit styles is to use a code sharing website like |link|
http://gist.github.com, and send us the link to your style, either by posting in
the |link| `Citation Styles section <http://forums.zotero.org/11/>`_ of the
Zotero forums, or by creating a new issue at the |link| `CSL Style Repository`_.

To make a Gist, go to |link| https://gist.github.com/ and copy and paste your
style code into the large text box. Enter the file name of the style in the
"name this file..." text box, and click the "Create Public Gist" button at the
bottom of the page. Include the link to the Gist (this link, which should look
like "https://gist.github.com/766801", is shown in the address bar of your
browser) in your forum post or issue description.

Frequent contributors can streamline the submission process by forking the
|link| `CSL Style Repository`_, committing the changes, and creating a |link|
`pull request <http://help.github.com/pull-requests/>`_. You can use your Git
client of choice, but we can recommend |link| `SmartGit
<http://www.syntevo.com/smartgit/index.html>`_, which is free for non-commercial
use.
